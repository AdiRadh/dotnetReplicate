/*
 * Replicate HTTP API
 *
 * A web service for running Replicate models
 *
 * The version of the OpenAPI document: 1.0.0-a1
 * Contact: team@replicate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = dotnetReplicate.Client.OpenAPIDateConverter;

namespace dotnetReplicate.Model
{
    /// <summary>
    /// Account
    /// </summary>
    [DataContract(Name = "account_get_200_response")]
    public partial class Account : IValidatableObject
    {
        /// <summary>
        /// The account type. Can be a user or an organization.
        /// </summary>
        /// <value>The account type. Can be a user or an organization.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Organization for value: organization
            /// </summary>
            [EnumMember(Value = "organization")]
            Organization = 1,

            /// <summary>
            /// Enum User for value: user
            /// </summary>
            [EnumMember(Value = "user")]
            User = 2
        }


        /// <summary>
        /// The account type. Can be a user or an organization.
        /// </summary>
        /// <value>The account type. Can be a user or an organization.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Account" /> class.
        /// </summary>
        /// <param name="githubUrl">The GitHub URL of the account..</param>
        /// <param name="name">The name of the account..</param>
        /// <param name="type">The account type. Can be a user or an organization..</param>
        /// <param name="username">The username of the account..</param>
        public Account(string githubUrl = default(string), string name = default(string), TypeEnum? type = default(TypeEnum?), string username = default(string))
        {
            this.GithubUrl = githubUrl;
            this.Name = name;
            this.Type = type;
            this.Username = username;
        }

        /// <summary>
        /// The GitHub URL of the account.
        /// </summary>
        /// <value>The GitHub URL of the account.</value>
        [DataMember(Name = "github_url", EmitDefaultValue = false)]
        public string GithubUrl { get; set; }

        /// <summary>
        /// The name of the account.
        /// </summary>
        /// <value>The name of the account.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The username of the account.
        /// </summary>
        /// <value>The username of the account.</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Account {\n");
            sb.Append("  GithubUrl: ").Append(GithubUrl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
